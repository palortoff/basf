#!/bin/bash

DESCRIPTION="Query ${BASF_PROGRAM_NAME} modules"
VERSION="0.1.0"
HIDDENMODULE=1

describe_list() {
    echo "List all available modules"
}

describe_list_options() {
    make_option --name "only_names" --long "only-names" --short "n" --desc "Output names of modules only"
    make_option --name "all"        --long "all"        --short "a" --desc "Do not omit hidden modules"
}

do_list() {
    local only_names path file module name desc path list_all
    local -a extra_modules

    has_option "all" "$@"
    list_all=$?

    has_option "only_names" "$@"
    only_names=$?

    for path in "${BASF_MODULES_PATH[@]}"; do
        # TODO: DRY
        for file in "${path}"/*.${BASF_MODULE_EXTENSION} ; do
            [[ -f ${file} ]] || continue
            [ $list_all -eq 1 ] && [ "$(read_config_value "${file}" HIDDENMODULE)" == "1" ] && continue

            extra_modules=( "${extra_modules[@]}" "${file}" )
        done
        if [ ! -z ${BASF_CUSTOM_MODULE_EXTENSION} ]; then
            for file in "${path}"/*.${BASF_CUSTOM_MODULE_EXTENSION} ; do
                [[ -f ${file} ]] || continue
                [ $list_all -eq 1 ] && [ "$(read_config_value "${file}" HIDDENMODULE)" == "1" ] && continue

                extra_modules=( "${extra_modules[@]}" "${file}" )
            done
        fi
    done

    if [[ ${only_names} -eq 0 ]]; then
        # TODO: disabled for now. add -v option or something like that...
        # This is mainly intended for bash completion
        # echo "help"
        # echo "usage"
        # echo "version"
        for module in "${extra_modules[@]}" ; do
            name=${module##*/}
            name=${name%%.${BASF_MODULE_EXTENSION}}
            name=${name%%.${BASF_CUSTOM_MODULE_EXTENSION}}
            echo "${name}"
        done
    else
        # TODO: disabled for now. add -v option or something like that...
        # write_list_start "Built-in modules:"
        # write_kv_list_entry "help"          "Display a help message"
        # write_kv_list_entry "usage"         "Display a usage message"
        # write_kv_list_entry "version"       "Display version information"

        if [[ ${#extra_modules[@]} -gt 0 ]] ; then
            echo
            write_list_start "Modules:"
            for module in "${extra_modules[@]}" ; do
                name=${module##*/}
                name=${name%%.${BASF_MODULE_EXTENSION}}
                name=${name%%.${BASF_CUSTOM_MODULE_EXTENSION}}
                desc="$(read_config_value "${module}" DESCRIPTION) " || killme
                desc=${desc:-No description available}
                write_kv_list_entry "${name}" "${desc}"
            done
        fi
    fi
}

describe_has() {
    echo "Return true if the module is installed, otherwise false."
}

describe_has_parameters() {
    echo "<module>"
}

do_has() {
    [[ -z $1 ]]    && die -q "Required option (module name) missing"
    [[ $# -gt 1 ]] && die -q "Too many parameters"

    local modname=$1 modpath

    for path in "${BASF_MODULES_PATH[@]}"; do
        [[ -f "${path}/${modname}.${BASF_MODULE_EXTENSION}" ]] && return 0
        [[ -f "${path}/${modname}.${BASF_CUSTOM_MODULE_EXTENSION}" ]] && return 0
    done

    return 1
}


# vi: set shiftwidth=4 tabstop=4 expandtab:
